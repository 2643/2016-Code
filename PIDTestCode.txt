package org.usfirst.frc.team2643.robot;
 
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
 
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
   
    //0
    int slideMotorPort1 = 3;
    int slideMotorPort2 = 4;
    int slideEncoderPort1 = 0;
    int slideEncoderPort2 = 1;
    int leftEncoderPort1 = 4;
    int leftEncoderPort2 = 5;
    int rightEncoderPort1 = 2;
    int rightEncoderPort2 = 3;
    int frontLeftMotorPort = 5;
    int frontRightMotorPort = 7;
    int backLeftMotorPort = 6;
    int backRightMotorPort = 9;
    int ticksPerRotation = 255;
    double revolutions = 0;
    double rps;
    //double error;
    double desired = 1;
   
   
    Timer clock = new Timer();
    Talon frontLeftMotor = new Talon(frontLeftMotorPort);
    Talon frontRightMotor = new Talon(frontRightMotorPort);
    Talon backLeftMotor = new Talon(backLeftMotorPort);
    Talon backRightMotor = new Talon(backRightMotorPort);
    Joystick stick = new Joystick(1);
    Talon slideMotor1 = new Talon(slideMotorPort1);
    Talon slideMotor2 = new Talon(slideMotorPort2);
    Encoder slideEncoder = new Encoder(slideEncoderPort1, slideEncoderPort2);
    Encoder leftEncoder = new Encoder(leftEncoderPort1, leftEncoderPort2);
    Encoder rightEncoder = new Encoder(rightEncoderPort1, rightEncoderPort2);
    PIDController testController = new PIDController(0.8, 0.1, 0.0, leftEncoder, frontLeftMotor, 0.8);
    //PIDControl testControl = new PIDControl(slideMotor1, testEncoder, testController);
   
    String autoSelected;
    SendableChooser chooser;
   
   
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
        //clock.start();
        testController.enable();
        leftEncoder.setPIDSourceType(PIDSourceType.kRate);
       testController.setSetpoint(2888.921);
       
    }
   
    /**
     * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
     * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
     * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
     * below the Gyro
     *
     * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
     * If using the SendableChooser make sure to add them to the chooser code above as well.
     */
    public void autonomousInit() {
        autoSelected = (String) chooser.getSelected();
//      autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
        System.out.println("Auto selected: " + autoSelected);
    }
 
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        switch(autoSelected) {
        case customAuto:
        //Put custom auto code here  
            break;
        case defaultAuto:
        default:
        //Put default auto code here
            break;
        }
    }
 
    /**
     * This function is called periodically during operator control
     */
    long lastTime = System.currentTimeMillis();
    public void teleopPeriodic() {
        /*testControl.doPID();
        slideMotor1.set(0.25);
        slideMotor2.set(0.25);*/
            //frontLeftMotor.set(desired);
        //backLeftMotor.set(desired);
        while(isOperatorControl() && isEnabled()){
        //System.out.println("last: " + lastTime);
        // System.out.println("Cur: " + System.currentTimeMillis());
                if(System.currentTimeMillis() >= lastTime + 500){
                        revolutions = 1.0 * leftEncoder.get()/ticksPerRotation;
                        rps = revolutions;
                        System.out.println(-rps*2);
                        leftEncoder.reset();
                        lastTime = System.currentTimeMillis();
          }
                //Wait(0.005);
        }
    }
   
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
   
    }
   
}