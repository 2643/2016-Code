package org.usfirst.frc.team2643.robot;

import org.usfirst.frc.team2643.robot.commands.ExampleCommand;
import org.usfirst.frc.team2643.robot.subsystems.ExampleSubsystem;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Robot extends IterativeRobot {
        Talon linearSlide = new Talon(4);
        Talon linearSlide2 = new Talon(5);
        Talon frameMotor = new Talon(1);
        Joystick gamePad = new Joystick(0);
        Timer clock = new Timer(0);
        DigitalInput slideTopLimitSwitch  = new DigitalInput(0);
        DigitalInput slideBottomLimitSwitch  =  new DigitalInput(1);
        DigitalInput fTopLimitSwitch = new DigitalInput(2);
        DigitalInput fBottomLimitSwitch = new DigitalInput(3);
        Encoder SlideEncoder = new Encoder(0,1);
        Encoder fEncoder = new Encoder(2,3);
        
public static final ExampleSubsystem exampleSubsystem = new ExampleSubsystem();
	public static OI oi;

    Command autonomousCommand;
    SendableChooser chooser;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
		oi = new OI();
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", new ExampleCommand());
//        chooser.addObject("My Auto", new MyAutoCommand());
        SmartDashboard.putData("Auto mode", chooser);
    }

/**
     * This function is called once each time the robot enters Disabled mode.
     * You can use it to reset any subsystem information you want to clear when
	 * the robot is disabled.
     */
    public void disabledInit(){

    }
	
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString code to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional commands to the chooser code above (like the commented example)
	 * or additional comparisons to the switch structure below with additional strings & commands.
	 */
    public void autonomousInit() {
        autonomousCommand = (Command) chooser.getSelected();
        
		/* String autoSelected = SmartDashboard.getString("Auto Selector", "Default");
		switch(autoSelected) {
		case "My Auto":
			autonomousCommand = new MyAutoCommand();
			break;
		case "Default Auto":
		default:
			autonomousCommand = new ExampleCommand();
			break;
		} */
    	
    	// schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
		// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    






    	clock.start();


//if the top/bottom limit switches are pressed linear slide stops if(slideTopLimitSwitch.get()||slideBottomLimitSwitch.get()){
linearSlide.set(0);linearSlide2.set(0);
}


//if the encoder is less than 20 slow down
    {
    
	double highHeightBoundary = 80;
	double lowHeightBoundary = 20;
	{
if (SlideEncoder.get() < lowHeightBoundary){
        linearSlide.set(0.2);
        linearSlide2.set(0.2);
}
//if the encoder is more than 80 slow down
else if(SlideEncoder.get() > highHeightBoundary){
        linearSlide.set(0.2);
        linearSlide2.set(0.2);
}

//if you press button2 linear slide goes down
else if(gamePad.getRawButton(2)){
        linearSlide.set(-0.3);
        linearSlide2.set(-0.3);
}
//if you press button3 linear slide goes up
else if(gamePad.getRawButton(3)){
        linearSlide.set(0.3);
        linearSlide2.set(0.3);
}
else
{
linearSlide.set(0);
linearSlide2.set(0)


}




//if we’ve been +130 sec in the competition and you press button 9 frame goes up
if(clock.get() > 130 && gamePad.getRawButton(9) == true){
        frameMotor.set(0.3);
}
//if we’ve been +130 in the competition and you press button 8 frame goes down
else if(clock.get() > 130 && gamePad.getRawButton(8) == true){
        frameMotor.set(-0.3);
}
    
        Scheduler.getInstance().run();
    }
    }
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
