package org.usfirst.frc.team2643.robot;


import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;
    SendableChooser chooser;
    int barrierInfront = (int) (SmartDashboard.getNumber("DB/Slider 0", 0)*2);
    int shiftStartingPosition = (int) ((SmartDashboard.getNumber("DB/Slider 1",0)-2.5)*2);
    static double turn90Amount = 0;
    static double distanceBetweenDefenses = 0;
    static double distanceToDefense = 0;
    static double distanceToFinishDefense = 0;
    static double distanceToPullDown = 0;
    double distanceTillUp = 0;
    double distanceOverDefense = 0;
    static Talon backLeftMotor = new Talon(0);
    static Talon backRightMotor = new Talon(1);
    static Talon frontLeftMotor = new Talon(2);
    static Talon frontRightMotor = new Talon(3);
    static Talon leftHookMotor = new Talon(4);
    static Talon rightHookMotor = new Talon(5);
    static Encoder leftDriveEncoder  = new Encoder(0,1);
    static Encoder rightDriveEncoder = new Encoder(2,3);
    static Encoder leftHookEncoder = new Encoder(4,5);
    static Encoder rightHookEncoder = new Encoder(6,7);
    static DigitalInput leftBottomSwitch = new DigitalInput(0); 
    static DigitalInput rightBottomSwitch = new DigitalInput(1);
    static DigitalInput leftTopSwitch = new DigitalInput(2);
    static DigitalInput rightTopSwitch = new DigitalInput(3);
    //Declaration of variables^
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        SmartDashboard.putNumber("DB/Slider 0" , 0.0);
        SmartDashboard.putNumber("DB/Slider 1" , 0.0);
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
    }
    
        /**
         * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
         * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
         * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
         * below the Gyro
         *
         * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
         * If using the SendableChooser make sure to add them to the chooser code above as well.
         */
    public void autonomousInit() {
            autoSelected = (String) chooser.getSelected();
//                autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
                System.out.println("Auto selected: " + autoSelected);
    }


    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
            AutoMethods.turnMove(shiftStartingPosition);
            AutoMethods.moveUp(distanceTillUp,1);
            if(barrierInfront == 1){
                    AutoMethods.crossDrawbridge();
            }else if(barrierInfront == 2){
                    AutoMethods.crossPortcullus();
            }else if(barrierInfront == 3){
                    AutoMethods.crossChevalDeFrise();
            }else if(barrierInfront == 4){
                    AutoMethods.crossSallyPort();
            }else if(barrierInfront == 5){
                    AutoMethods.crossMoat(distanceOverDefense);
            }else if(barrierInfront == 6){
                    AutoMethods.crossRoughTerrain(distanceOverDefense);
            }else if(barrierInfront == 7){
                    AutoMethods.crossRamparts(distanceOverDefense);
            }else if(barrierInfront == 8){
                    AutoMethods.crossRockWall(distanceOverDefense);
            }else{
                    
            }
    }


    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
    
}